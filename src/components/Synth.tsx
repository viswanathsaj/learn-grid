import type { NextComponentType } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import { Output, WebMidi } from 'webmidi'
import synth from '@utils/synth'
import * as Tone from 'tone'
import { get } from 'http'

const Synth: NextComponentType = () => {
  const myInput = WebMidi.getInputByName('Launchpad X LPX MIDI Out')
  const myOutput = WebMidi.getOutputByName('Launchpad X LPX MIDI In')

  const listen = () => {
    if (myInput && myOutput) {
      console.log('added listeners')
      myInput.addListener('noteon', (e) => {
        console.log(Tone.Transport.state)
        synth.triggerAttack(e.note.identifier, Tone.now(), e.note.attack)
      })
      myInput.addListener('noteoff', (e) => {
        synth.triggerRelease(e.note.identifier, e.note.release)
      })

      myInput.addListener('sysex', (e) => {
        console.log(e.message)
      })
    } else {
      console.log("Can't Find Device")
    }
  }

  const sleep = () => {
    try {
      myOutput.send([240, 0, 32, 41, 2, 12, 9, 0, 247])
    } catch (error) {
      console.log(error)
    }
  }

  const getInfo = () => (myOutput.send([240, 126, 127, 6, 1, 247]) ? true : false)

  const noteMode = () => (myOutput.send([240, 0, 32, 41, 2, 12, 0, 1, 247]) ? true : false)

  return (
    <>
      <Head>
        <title>Learn Grid</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]'>
        <div className='container flex flex-col items-center justify-center gap-12 px-4 py-16 '>
          <button onClick={() => sleep()}>Sleep</button>
          <button onClick={() => listen()}>Listen</button>
          <button onClick={() => getInfo()}>Info</button>
          <button onClick={() => noteMode()}>Note Mode</button>
        </div>
      </main>
    </>
  )
}

export default Synth
